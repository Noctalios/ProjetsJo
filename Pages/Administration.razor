@using ProjetsJo.Entities;
@using ProjetsJo.BLL.Interfaces;
@attribute [Authorize(Roles = "Administrateur")];

@inject IOfferService offerService;
@inject ISnackbar Snackbar

@page "/Administration"

<h2>Page d'administration des offres de la billetterie</h2>
<div class="offers">
    <div class="offer-edit">
        <div>
            <label>Intitulé de l'offre: </label>
            <input class="" @onfocusout="()=>Save(newOffer.Name, newOffer)" type="text" @bind="@newOffer.Name" />
        </div>
        <div>
            <label>Nombre de tickets de l'offre: </label>
            <input @onfocusout="()=>Save(newOffer)" type="number" min="1" @bind="@newOffer.TicketNumber" />
        </div>
        <div>
            <label>Prix: </label>
            <input @onfocusout="()=>Save(newOffer)" type="number" min="0.00" step="0.01" @bind="@newOffer.Price" />
        </div>
        <div>
            <label>Ventes: @newOffer.Total</label>
        </div>
        <button @onclick="Add">Ajouter</button>
    </div>
    @foreach (Offer offer in Offers)
    {
        <div class="offer-edit">
            <div>
                <label>Intitulé de l'offre: </label>
                <input class="" @onfocusout="()=>Save(offer.Name, offer)" type="text" @bind="@offer.Name" />
            </div>
            <div>
                <label>Nombre de tickets de l'offre: </label>
                <input @onfocusout="()=>Save(offer)" type="number" min="1" @bind="@offer.TicketNumber" />
            </div>
            <div>
                <label>Prix: </label>
                <span>@offer.Price€</span>
            </div>
            <div>
                <label>Ventes: @offer.Total</label>
            </div>
            <button @onclick="()=>Disable(offer.Id)">Désactivation</button>
        </div>
    }
</div>

@code {
    private List<Offer> Offers = new List<Offer>();
    private Offer newOffer = new Offer();
    private Dictionary<int, bool> offerNameUnicity = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GetOffers();
    }

    private void GetOffers()
    {
        Offers = offerService.GetOffers();
        Offers.ForEach(o => offerNameUnicity.Add(o.Id, true));
        resetNewOffer();
    }

    private void resetNewOffer()
    {
        newOffer.Id = 0;
        newOffer.Name = "";
        newOffer.TicketNumber = 0;
        newOffer.Price = 0m;
        newOffer.Total = 0;
    }

    private void Save(string newName, Offer offerToUpdate)
    {
        if (Offers.Count(o => o.Name == newName) <= 1)
            offerService.UpdateOffer(offerToUpdate);
        else
            offerNameUnicity[offerToUpdate.Id] = true;
    }

    private void Add()
    {
        string warningMessage = "Ajout impossible:<br>";
        if (string.IsNullOrWhiteSpace(newOffer.Name))
            warningMessage += $"- Veuillez saisir un Nom <br>";
        if (Offers.Count(o => o.Name == newOffer.Name) > 1)
            warningMessage += $"- Au moins une autre offre à le même nom <br>";
        if (newOffer.TicketNumber == 0)
            warningMessage += $"- Une offre doit au moins vendre 1 ticket.<br>";
        if (newOffer.Price == 0)
            warningMessage += $"- L'offre doit avoir un prix<br>";

        if (warningMessage == "Ajout impossible:<br>")
        {
            try
            {
                offerService.AddOffer(newOffer);

                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                Snackbar.Configuration.SnackbarVariant = Variant.Filled;
                Snackbar.Add($"Ajout réalisé.", Severity.Success);
                GetOffers();
                resetNewOffer();
            }
            catch
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                Snackbar.Configuration.SnackbarVariant = Variant.Filled;
                Snackbar.Add($"L'ajout n'a pas eu lieu.", Severity.Error);
            }
        }
        else
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Configuration.SnackbarVariant = Variant.Filled;
            Snackbar.Add($"{warningMessage}", Severity.Error);
        }
    }

    private void Save(Offer offerToUpdate)
    {
        offerService.UpdateOffer(offerToUpdate);
    }

    private void Disable(int offerId)
    {
        offerService.DisableOffer(offerId);
        GetOffers();
    }
}
