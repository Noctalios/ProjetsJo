@using ProjetsJo.Entites;
@using ProjetsJo.BLL.Interfaces;
@attribute [Authorize(Roles="Administrateur")];

@inject IOfferService offerService;
@inject ISnackbar Snackbar

@page "/Administration"

<h2>Page d'administration des offres de la billetterie</h2>
<div class="offers">
    <div class="offer-edit">
        <div>
            <label>Intitulé de l'offre: </label>
            <input class="" @onfocusout="()=>Save(newOffer.Name, newOffer)" type="text" @bind="@newOffer.Name" />
        </div>
        <div>
            <label>Nombre de tickets de l'offre: </label>
            <input @onfocusout="()=>Save(newOffer)" type="number" min="1" @bind="@newOffer.TicketNumber" />
        </div>
        <div>
            <label>Prix: </label>
            <input @onfocusout="()=>Save(newOffer)" type="number" min="0.00" step="0.01" @bind="@newOffer.Price" />
        </div>
        <div>
            <label>Ventes: @newOffer.Total</label>
        </div>
        <button @onclick="Add">Ajouter</button>
    </div>
    @foreach (Offer offer in Offers)
    {
        <div class="offer-edit">
            <div>
                <label>Intitulé de l'offre: </label>
                <input class="" @onfocusout="()=>Save(offer.Name, newOffer)" type="text" @bind="@offer.Name" />
            </div>
            <div>
                <label>Nombre de tickets de l'offre: </label>
                <input @onfocusout="()=>Save(offer)" type="number" min="1" @bind="@offer.TicketNumber" />
            </div>
            <div>
                <label>Prix: </label >
                <span>@offer.Price€</span>
            </div>
            <div>
                <label>Ventes: @offer.Total</label>
            </div>
            @*<button @onclick="()=>Disable(offer)">Désactivation</button>*@
        </div>
    }
</div>

@code {
    private List<Offer> Offers = new List<Offer>();
    private Offer newOffer = new Offer();
    private Dictionary<int, bool> offerNameUnicity = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GetOffers();
    }

    private void GetOffers()
    {
        Offers = offerService.GetOffers();
        Offers.ForEach(o => offerNameUnicity.Add(o.Id, true));
        resetNewOffer();
    }

    private void Save(string newName, Offer offerToUpdate)
    {
        if (Offers.Any(o => o.Name != newName))
            offerService.UpdateOffer(offerToUpdate);
        else
            // Todo actualise offerNameUnicity false for elements.
            offerNameUnicity.First(o => o.Key == offerToUpdate.Id);
    }

    private void Save(Offer offerToUpdate)
    {
        offerService.UpdateOffer(offerToUpdate);
    }

    private void Add()
    {
        string warningMessage = "Connexion impossible:<br>";
        if (string.IsNullOrWhiteSpace(newOffer.Name))
            warningMessage += $"- Veuillez saisir un Nom <br>";
        if (Offers.Any(o => o.Name != newOffer.Name))
            warningMessage += $"- Au moins deux offres ont le même nom <br>";
        if (newOffer.TicketNumber > 0)
            warningMessage += $"- Une offre doit au moins vendre 1 ticket.<br>";
        if (newOffer.Price > 0)
            warningMessage += $"- Veuillez saisir votre Mot de Passe<br>";

        if (warningMessage != "Connexion impossible:<br>")
        {
            offerService.AddOffer(newOffer);

            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Configuration.SnackbarVariant = Variant.Filled;
            Snackbar.Add($"Ajout réalisé.", Severity.Success);

            GetOffers();
            resetNewOffer();
        }
        else
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Configuration.SnackbarVariant = Variant.Filled;
            Snackbar.Add($"L'ajout n'a pas eu lieu.", Severity.Error);
        }
    }

    #region Technical
    private void resetNewOffer()
    {
        newOffer.Id = 0;
        newOffer.Name = "";
        newOffer.TicketNumber = 0;
        newOffer.Price = 0m;
        newOffer.Total = 0;
    }

    private void VerifyName()
    {
        
    }

    #endregion
}
