@using ProjetsJo.Entities;
@using ProjetsJo.BLL.Interfaces;
@using ProjetsJo.Authentication;
@using System.Security.Claims;
@using System.Text.Encodings;
@using ProjetsJo.Pages;
@page "/Ticketing"
@inherits LayoutComponentBase
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IOfferService _offerService
@inject ITicketingService _ticketService

<div class="ticketing-container">
    <div class="offers">
        <h3>Les Offres :</h3>
        @foreach(Offer offer in Offers.Where(o => o.State))
        {
            <div class="offer">
                <span>Offre: @offer.Name</span>
                <span>Nombre de ticket: @offer.TicketNumber</span>
                <span>Prix: @offer.Price€</span>
                <AuthorizeView>
                    <Authorized>
                        <button class="add-offer" @onclick="()=>AddOfferToCart(offer)">
                            Ajouter
                        </button>
                    </Authorized>
                </AuthorizeView>
            </div>
        }
    </div>
    @if (connectedUser.Tickets != null)
    {
        <div class="tickets-container">
            <h3>Mes Tickets :</h3>
            <div class="tickets">
                @foreach (Ticket ticket in connectedUser.Tickets!)
                {
                    <img alt="Embedded QR Code" src="data:image/jpeg;base64,@ticket.Qrcode" />
                }
            </div>
        </div>
    }
    @if (Cart.Keys.ToList().Count > 0)
    {
        <div class="cart">
            <h3>Mon Panier :</h3>
            @foreach (Offer offerToPay in Cart.Keys.ToList())
            {
                <div class="offer-to-pay">
                    <div class="offer-info">
                        <span>@Cart[offerToPay] x @offerToPay.Name</span>
                        <div class="modify-quantity">
                            <span class="oi oi-minus" @onclick="()=>DecreaseCart(offerToPay)" />
                            <input @bind="Cart[offerToPay]" type="number" class="modify-quantity" />
                            <span class="oi oi-plus" @onclick="()=>Cart[offerToPay]++" />
                        </div>
                        <button class="oi oi-delete" @onclick="()=>RemoveOfferToPay(offerToPay)"></button>
                    </div>
                    <div class="action-button">
                        <span>Prix: @offerToPay.Price€</span>
                        <span>Montant pour l'offre: @(offerToPay.Price * Cart[offerToPay])€</span>
                    </div>
                </div>
            }
            <div class="pay-zone">
                <div>Total à régler : @getTotalAmount() €</div>
                <AuthorizeView>
                    <Authorized>
                        <button class="action-button" @onclick="PayCart">Paiement</button>
                        @if(spinner)
                        {
                            <span class="oi oi-clock"></span>
                        }
                    </Authorized>
                    <NotAuthorized>
                        <span>Veuillez vous connecter pour procéder au paiement de l'offre</span> 
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </div>
    }
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; } 
    private List<Offer> Offers = new();
    private Dictionary<Offer, int> Cart = new();
    private User connectedUser { get; set; } = new();
    private bool spinner = false;

    /// <summary>
    /// Initialilize the offers and get user connected infos.
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Offers = _offerService.GetOffers();

        // GetAuthentication
        AuthenticationState currentUser = authenticationState.Result;
        if (currentUser.User.Identity.IsAuthenticated)
        {
            connectedUser.FirstName = currentUser.User.Claims.First(c => c.Type  == ClaimTypes.Name).Value;
            connectedUser.LastName = currentUser.User.Claims.First(c => c.Type  == ClaimTypes.Surname).Value;
            connectedUser.Email = currentUser.User.Claims.First(c => c.Type  == ClaimTypes.Email).Value;
            connectedUser.AccountKey = Guid.Parse(currentUser.User.Claims.First(c => c.Type  == ClaimTypes.Sid).Value);
            connectedUser.IsAdmin = currentUser.User.Claims.First(c => c.Type == ClaimTypes.Role).Value == "Administrateur";
            ActualiseUserTickets();
        };
    }

    /// <summary>
    /// This method adds the offer to the cart and if it is already present increments it instead.
    /// </summary>
    /// <param name="offerToAdd">Offer that must be added to the cart.</param>
    private void AddOfferToCart(Offer offerToAdd)
    {
        if (Cart.ContainsKey(offerToAdd))
            Cart[offerToAdd]++;
        else
            Cart.Add(offerToAdd, 1);
    }

    /// <summary>
    /// This method remove the offer of the cart.
    /// </summary>
    /// <param name="offerToRemove">Offer that must be removed from the cart</param>
    private void RemoveOfferToPay(Offer offerToRemove)
    {
        Cart.Remove(offerToRemove);
    }

    /// <summary>
    /// This method decrease the quantity of an offer of the Cart.
    /// If this offer quantity reach 0, the offer is removed.
    /// </summary>
    /// <param name="offerToDecrease">Offer that must be decreased</param>
    private void DecreaseCart(Offer offerToDecrease)
    {
        Cart[offerToDecrease]--;
        if (Cart[offerToDecrease] == 0)
            RemoveOfferToPay(offerToDecrease);
    }

    /// <summary>
    /// This method permit to choose the quantity of an offer.
    /// </summary>
    /// <param name="e">Event arg that contains the new quantity</param>
    /// <param name="offerToModify">Offer whose quantity must be modified.</param>
    private void ModifyQuantity(ChangeEventArgs e, Offer offerToModify)
    {
        if(e.Value != null)
            if(Int32.TryParse(e.Value!.ToString(), out int result))
                Cart[offerToModify] = result;
    }

    /// <summary>
    /// This method calculates the total amount of the cart.
    /// </summary>
    /// <returns>Returns the total amount to pay to purchase tickets.</returns>
    private decimal getTotalAmount()
    {
        decimal amount = 0m;
        Cart.Keys.ToList().ForEach(o => amount += Cart[o] * o.Price);
        return amount;
    }

    /// <summary>
    /// This method mocks the payment of tickets to a payment API.
    /// Then this method request the server to create the tickets.
    /// Then Get all the tickets of the User.
    /// </summary>
    private async void PayCart()
    {
        int number = 0;
        Cart.Keys.ToList().ForEach(o => number += o.TicketNumber * Cart[o]);
        spinner = true;
        await _ticketService.MockPaymentApi();
        spinner = false;
        _ticketService.CreateTickets(connectedUser.AccountKey, Cart);
        ActualiseUserTickets();
    }

    /// <summary>
    /// Request the server to get tickets of the current User.
    /// </summary>
    private void ActualiseUserTickets()
    {
        connectedUser.Tickets = _ticketService.GetUserTickets(connectedUser.AccountKey).Result;
        StateHasChanged();
    }
}
