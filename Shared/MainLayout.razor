@using ProjetsJo.Entites;
@using ProjetsJo.Authentication;
@using ProjetsJo.Pages;
@using System.Security.Claims;
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inherits LayoutComponentBase
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>ProjetsJo</PageTitle>

<div class="page">
    <main>
        <div class="header">
            <button class="oi oi-menu" @onclick="ToggleNavMenu"></button>
            <h1>Billeterie des JO 2024</h1>
            <AuthorizeView>
                <Authorized>
                    <button @onclick="LogOut" class="connexion">@GetDisplayName(context.User)</button>
            </Authorized>
                <NotAuthorized>
                    <button class="connexion" @onclick="Connexion">Connexion</button>
                </NotAuthorized>
            </AuthorizeView>
        </div>
        <div class="body-zone">
            <div class="sidebar @displayMenu">
                <NavMenu OnClickCallback="ToggleNavMenu" />
            </div>
            <article class="content">
                @Body
            </article>
        </div>
    </main>
</div>

@code{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private User connectedUser { get; set; } = new();

    private bool collapseNavMenu = true; 
    private string? displayMenu => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Connexion()
    {
        var options = new DialogOptions
            {
                CloseButton = true,
                CloseOnEscapeKey = true,
                FullWidth = true,
                Position = DialogPosition.Center
            };

        var dialog = await DialogService.ShowAsync<Connexion>("Connexion", options);
        var result = await dialog.Result;

        if (result.Data != null)
        {
            User currentUser = (User)result.Data;
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Configuration.SnackbarVariant = Variant.Filled;
            Snackbar.Add($"Bonjour", Severity.Success);
        }
    }

    private async Task LogOut()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        navManager.NavigateTo("/", true);
    }

    private string GetDisplayName(ClaimsPrincipal user)
    {
        string displayName = $"{ user.Claims.First(c => c.Type == ClaimTypes.Name).Value}  { user.Claims.First(c => c.Type == ClaimTypes.Surname).Value}";
        return $"Hello {displayName}, Déconnexion";
    }
}