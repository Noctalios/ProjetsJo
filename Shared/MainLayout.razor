@using ProjetsJo.Entites;
@using ProjetsJo.Authentication;
@using ProjetsJo.Pages;
@inherits LayoutComponentBase
@inject AuthenticationStateProvider authStateProvider
@inject IDialogService DialogService
@inject ISnackbar Snackbar
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>ProjetsJo</PageTitle>

<div class="page">
    <header class="header">
        <button class="oi oi-menu" @onclick="ToggleNavMenu"></button>
        <h1>Header of the application</h1>
        <AuthorizeView>
            <Authorized>
                <div class="connexion">
                    <span>Bonjour @context.User.Identity.Name</span>
                    <span @onclick="LogOut">Déconnexion</span>
                </div>
            </Authorized>
            <NotAuthorized>
                <button class="connexion" @onclick="Connexion">Connexion</button>
            </NotAuthorized>
        </AuthorizeView>
    </header>
    <main>
        <div class="sidebar @displayMenu">
            <NavMenu OnClickCallback="ToggleNavMenu" />
        </div>
        <article class="content">
            @Body
        </article>
    </main>
</div>

@code{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private bool collapseNavMenu = true; 
    private string? displayMenu => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    
    private async Task Connexion()
    {
        var options = new DialogOptions
            {
                CloseButton = true,
                CloseOnEscapeKey = true,
                FullWidth = true,
                Position = DialogPosition.Center
            };

        var dialog = await DialogService.ShowAsync<Connexion>("Connexion", options);
        var result = await dialog.Result;

        if (result.Data != null)
        {
            User currentUser = (User)result.Data;
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Configuration.SnackbarVariant = Variant.Filled;
            Snackbar.Add($"Bonjour", Severity.Success);
        }
    }

    private async Task LogOut()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
    }
}