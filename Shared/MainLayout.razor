@using ProjetsJo.Entites;
@using ProjetsJo.Authentication;
@using ProjetsJo.Pages;
@using System.Security.Claims;
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inherits LayoutComponentBase
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>ProjetsJo</PageTitle>

<div class="page">
    <main>
        <div class="header">
            <div class="nav-buttons">
                <button class="oi oi-menu" @onclick="ToggleNavMenu"></button>
                @if (!isPageTicketing)
                {
                    <AuthorizeView>
                        <NotAuthorized>
                            <button class="oi oi-cart" @onclick="GoToTicketing"></button>
                        </NotAuthorized>
                    </AuthorizeView>
                }
            </div>
            <h1>Billeterie des JO 2024</h1>
            <AuthorizeView>
                <Authorized>
                    <button @onclick="LogOut" class="connexion ">
                        @GetDisplayName(context.User)
                        <span class="oi oi-account-logout" />
                    </button>
                </Authorized>
                <NotAuthorized>
                    <button class="connexion" @onclick="Connexion">
                        Connexion
                        <span class="oi oi-account-login" />
                    </button>
                </NotAuthorized>
            </AuthorizeView>
        </div>
        <div class="body-zone">
            <div class="sidebar @displayMenu">
                <NavMenu OnClickCallback="ToggleNavMenu" OnGoTicketing="(IsGoing)=>switchBoolean(IsGoing)" />
            </div>
            <article class="content">
                @Body
            </article>
        </div>
    </main>
</div>

@code{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private User connectedUser { get; set; } = new();

    private bool collapseNavMenu = true;
    static public bool isPageTicketing = false;
    private string? displayMenu => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void GoToTicketing()
    {
        switchBoolean(true);
        navManager.NavigateTo("/Ticketing", false);
    }

    private void switchBoolean(bool moovePage)
    {
        isPageTicketing = moovePage;
    }

    private async Task Connexion()
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
            FullWidth = true,
            Position = DialogPosition.Center
        };
        var parameters = new DialogParameters();

        parameters.Add("IsPageTicketing", isPageTicketing);

        var dialog = await DialogService.ShowAsync<Connexion>("Connexion", parameters ,options);
        var result = await dialog.Result;

        if (result.Data != null)
        {
            User currentUser = (User)result.Data;
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Configuration.SnackbarVariant = Variant.Filled;
            Snackbar.Add($"Bonjour", Severity.Success);
        }
    }

    private async Task LogOut()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        switchBoolean(false);
        navManager.NavigateTo("/", true);
    }

    private string GetDisplayName(ClaimsPrincipal user)
    {
        string displayName = $"{ user.Claims.First(c => c.Type == ClaimTypes.Name).Value}  { user.Claims.First(c => c.Type == ClaimTypes.Surname).Value}";
        return $"{displayName}, Déconnexion";
    }
}